services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - my_network

  # Kafka for weather messages
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - my_network

  # Spark Master
  spark-master:
    image: bitnami/spark:3
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8085:8080"
    networks:
      - my_network

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    networks:
      - my_network

  # Cassandra for storage
  cassandra:
    image: cassandra:4.0
    ports:
      - "9042:9042"
    networks:
      - my_network

  # node-api:
  #   build: ./weather-api
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - cassandra  # Ensure node-api waits for cassandra to be up
  #   networks:
  #     - my_network  # Same network

  mysql:
    image: mysql:8.0.33        # Utilisez la version souhaitée de MySQL
    container_name: mysql-container
    restart: always         # Redémarre automatiquement le conteneur si nécessaire
    environment:
      MYSQL_ROOT_PASSWORD: mypassword    # Mot de passe pour l'utilisateur root
      MYSQL_DATABASE: my_database            # Base de données initiale
    ports:
      - "3308:3306"          
    networks:
      - my_network

networks:
  my_network:   # Define the network here
    driver: bridge


